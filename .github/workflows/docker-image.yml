name: CI Pipeline 

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
 
jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      # Checkout Code
      - name: Checkout code
        uses: actions/checkout@v3

      # Skip CI Check
      - name: Check for [skip ci]
        id: skip_check
        run: git log -1 --pretty=%s | grep -iqE '\[skip ci\]|\[ci skip\]'
        continue-on-error: true

      - name: Set skip flag
        run: echo "SKIP_CI=true" >> $GITHUB_ENV
        if: ${{ steps.skip_check.outcome == 'success' }}

      # Install Dependencies
      - name: Install dependencies
        run: yarn install
        if: ${{ env.SKIP_CI != 'true' }}

      # Lint and Test
      - name: Lint and Test
        run: yarn lint && yarn test
        if: ${{ env.SKIP_CI != 'true' }}

      # Build Project
      - name: Build Project
        run: yarn build
        if: ${{ env.SKIP_CI != 'true' }}

      # Generate Version Tag
      - name: Generate Version Tag
        id: generate_version
        run: |
          last_version=$(git tag --sort=-v:refname | head -n 1 || echo "v0.0.0")
          major=$(echo $last_version | cut -d'.' -f1 | tr -d 'v')
          minor=$(echo $last_version | cut -d'.' -f2)
          patch=$(echo $last_version | cut -d'.' -f3)
          new_patch=$((patch + 1))
          new_version="v$major.$minor.$new_patch"
          echo "new_version=$new_version" >> $GITHUB_ENV
          echo "New version generated: $new_version"

      # Login to JFrog Docker Registry
      - name: Login to JFrog Docker Registry
        run: |
          echo "${{ secrets.JFROG_PASSWORD }}" | docker login satishrepo.jfrog.io -u "${{ secrets.JFROG_USERNAME }}" --password-stdin

      # Build Docker Image
      - name: Build Docker Image
        run: |
          docker build . --file Dockerfile --tag satishrepo.jfrog.io/my-repo-docker/express-typescript-docker:${{ env.new_version }}
        env:
          new_version: ${{ env.new_version }}

      # Push Docker Image to JFrog Artifactory
      - name: Push Docker Image to JFrog Artifactory
        run: |
          docker push satishrepo.jfrog.io/my-repo-docker/express-typescript-docker:${{ env.new_version }}
        env:
          new_version: ${{ env.new_version }}

      # Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Set up kubectl for EKS
      - name: Set up kubectl
        uses: aws-actions/configure-kubeconfig@v2
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          cluster-name: ${{ secrets.CLUSTER_NAME }}

      # Update kubeconfig for EKS
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.CLUSTER_NAME }}

      # Deploy to EKS using the deployment.yaml file
      - name: Deploy to EKS
        run: |
          kubectl apply -f deployment.yaml
