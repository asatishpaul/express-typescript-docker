name: CI Pipeline

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DEFAULT_REPO: "jfafn.jfrog.io/omfauto-container"
      WEBAPP_DIST_FOLDER: "omf-d-webapp"
    steps:
      - uses: actions/checkout@v2

      # Skipping CI
      - name: Check for [skip ci]
        id: skip_check
        run: git log -1 --pretty=%s | grep -iqE '\[skip ci\]|\[ci skip\]'
        continue-on-error: true  # This prevents the workflow from stopping on exit code 1
      
      - name: Set skip flag
        if: steps.skip_check.outcome == 'success'
        run: echo "SKIP_CI=true" >> $GITHUB_ENV


      # Login to Docker registry with JFrog
      - name: Set up JFrog CLI
        uses: jfrog/setup-jfrog-cli@v2
      - name: Log in to JFrog Artifactory
        run: |
          echo ${{ secrets.JFROG_CREDENTIALS_PSW }} | docker login -u "${{ secrets.JFROG_CREDENTIALS_USR }}" --password-stdin "jfafn.jfrog.io"

      # Yarn Build
      - name: Install dependencies
        run: yarn install
      - name: Lint and Test
        run: yarn lint && yarn test
      - name: Build Project
        run: yarn build

      # SonarQube Scan
      - name: SonarQube Scan
        uses: SonarSource/sonarcloud-github-action@v1.5
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: "https://sonarqube.omf.cloud"
        with:
          projectKey: ${{ secrets.SONARQUBE_PROJECT_KEY }}
          organization: ${{ secrets.SONARQUBE_ORGANIZATION }}

      # Publish Tag
      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      # Deployment to Dev
      - name: Deploy to Dev
        if: contains(github.ref, 'alpha')
        env:
          DEPLOY_ENVIRONMENT: "dev"
        run: |
          docker pull "$DEFAULT_REPO/${{ github.sha }}:latest"
          docker tag "$DEFAULT_REPO/${{ github.sha }}:latest" "$DEFAULT_REPO/dev:latest"
          docker push "$DEFAULT_REPO/dev:latest"

      # Notify Slack
      - name: Notify Slack
        uses: rtCamp/action-slack-notify@v2
        with:
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          message: "Deployment of ${{ github.sha }} to ${DEPLOY_ENVIRONMENT} succeeded"
          color: good
        if: success()
