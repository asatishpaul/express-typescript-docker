name: CI Pipeline

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest
    # env:
    #   DEFAULT_REPO: "jfafn.jfrog.io/omfauto-container"
    #   WEBAPP_DIST_FOLDER: "omf-d-webapp"
    steps:
      - uses: actions/checkout@v2

      # Skipping CI
      - name: Check for [skip ci]
        id: skip_check
        run: git log -1 --pretty=%s | grep -iqE '\[skip ci\]|\[ci skip\]'
        continue-on-error: true

      - name: Set skip flag
        run: echo "SKIP_CI=true" >> $GITHUB_ENV
        if: ${{ steps.skip_check.outcome == 'success' }}

      # Setup Paketo Buildpacks (Including Yarn Buildpack)
      - name: Set up Paketo Buildpacks
        run: |
          curl -sSL https://github.com/cloudfoundry/buildpacks-ci/releases/download/v1.0.0/buildpacks-ci-linux-amd64 -o buildpacks-ci
          chmod +x buildpacks-ci
          ./buildpacks-ci pack buildpack-pipeline --buildpacks "paketo-buildpacks/environment-variables@4.5.1,paketo-buildpacks/yarn@1.3.10,paketo-buildpacks/nginx@0.17.4,paketo-buildpacks/web-servers" --env BP_WEB_SERVER=nginx --env BP_WEB_SERVER_ROOT=dist/omf-d-webapp --env BP_WEB_SERVER_ENABLE_PUSH_STATE=true --env BPE_DEFAULT_PORT=8080


      # Login to Docker registry with JFrog
      # - name: Set up JFrog CLI
      #   uses: jfrog/setup-jfrog-cli@v2
      # - name: Log in to JFrog Artifactory
      #   run: |
      #     echo ${{ secrets.JFROG_CREDENTIALS_PSW }} | docker login -u "${{ secrets.JFROG_CREDENTIALS_USR }}" --password-stdin "jfafn.jfrog.io"

      # Yarn Build
      - name: Install dependencies
        run: yarn install
      - name: Lint and Test
        run: yarn lint && yarn test
      - name: Build Project
        run: yarn build

      # # SonarQube Scan
      # - name: SonarQube Scan
      #   uses: SonarSource/sonarcloud-github-action@v1.5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
      #     SONAR_HOST_URL: "https://sonarqube.omf.cloud"
      #   with:
      #     projectKey: ${{ secrets.SONARQUBE_PROJECT_KEY }}
      #     organization: ${{ secrets.SONARQUBE_ORGANIZATION }}

      # # Publish Tag
      # - name: Create Release
      #   uses: softprops/action-gh-release@v1
      #   if: startsWith(github.ref, 'refs/tags/')
      #   with:
      #     tag_name: ${{ github.ref_name }}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/  # Assuming your build outputs to a 'dist' folder

  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag ${{ secrets.DOCKER_USERNAME }}/express-typescript-docker

      - name: Docker Push
        run: docker push ${{ secrets.DOCKER_USERNAME }}/express-typescript-docker

      # # Notify Slack
      # - name: Notify Slack
      #   uses: rtCamp/action-slack-notify@v2
      #   with:
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      #     message: "Deployment of ${{ github.sha }} to ${DEPLOY_ENVIRONMENT} succeeded"
      #     color: good
      #   if: success()
