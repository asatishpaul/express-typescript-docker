name: CI Pipeline
 
on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
 
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # Skipping CI
      - name: Check for [skip ci]
        id: skip_check
        run: git log -1 --pretty=%s | grep -iqE '\[skip ci\]|\[ci skip\]'
        continue-on-error: true

      - name: Set skip flag
        run: echo "SKIP_CI=true" >> $GITHUB_ENV
        if: ${{ steps.skip_check.outcome == 'success' }}

      # Install dependencies (Yarn)
      - name: Install dependencies
        run: yarn install
        if: ${{ env.SKIP_CI != 'true' }}

      # Lint and Test
      - name: Lint and Test
        run: yarn lint && yarn test
        if: ${{ env.SKIP_CI != 'true' }}

      # Build Project
      - name: Build Project
        run: yarn build
        if: ${{ env.SKIP_CI != 'true' }}

      # Setup Java 17 (if required for the environment)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # configure SonarQube Scan if necessary
      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          npx sonar-scanner \
            -Dsonar.organization=my-project-ironrim \
            -Dsonar.projectKey=my-project-ironrim_sonarqube \
            -Dsonar.sources=. \
            -Dsonar.host.url=https://sonarcloud.io

      # Upload build artifacts with version
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-${{ env.new_version }}
          path: dist/

      # Set up JFrog CLI
      - name: Setup JFrog CLI
        run: |
          curl -fL https://getcli.jfrog.io | sh
          ./jfrog config add jfrog-server \
            --url ${{ secrets.JFROG_URL }} \
            --user ${{ secrets.JFROG_USERNAME }} \
            --password ${{ secrets.JFROG_PASSWORD }} \
            --enc-password=false \
            --interactive=false


      # Generate a version tag
      - name: Generate Version Tag
        id: generate_version
        run: |
          # Load the existing tag from the repository or default to v0.0.0
          last_version=$(git tag --sort=-v:refname | head -n 1 || echo "v0.0.0")
          # Increment the version
          major=$(echo $last_version | cut -d'.' -f1 | tr -d 'v')
          minor=$(echo $last_version | cut -d'.' -f2)
          patch=$(echo $last_version | cut -d'.' -f3)
          new_patch=$((patch + 1))
          new_version="v$major.$minor.$new_patch"
          echo "new_version=$new_version" >> $GITHUB_ENV
          echo "New version generated: $new_version"

      # Use the new version in steps
      - name: Build Docker Image
        run: |
          docker build . --file Dockerfile --tag satishrepo.jfrog.io/my-repo-docker/express-typescript-docker:${{ env.new_version }}
        env:
          new_version: ${{ env.new_version }}

      - name: Push Docker Image to JFrog Artifactory
        run: |
          docker push satishrepo.jfrog.io/my-repo-docker/express-typescript-docker:${{ env.new_version }}
        env:
          new_version: ${{ env.new_version }}


      # # Notify Slack (Optional)
      # - name: Notify Slack
      #   uses: rtCamp/action-slack-notify@v2
      #   with:
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      #     message: "Deployment of ${{ github.sha }} to production succeeded"
      #     color: good
      #   if: success()
